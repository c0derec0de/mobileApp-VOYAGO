name: Backend CI

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'

permissions:
  contents: read
  packages: write
  pull-requests: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Build
        run: |
          cd backend
          ./gradlew build -x test --no-daemon

  test:
    if: ${{ github.base_ref == 'develop' }}
    name: Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Setup Docker
        uses: docker/setup-docker-action@v4

      - name: Execute tests
        run: |
          cd backend
          ./gradlew test --no-daemon

  build_and_push_images:
    # if: ${{ github.base_ref == 'main' }}
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push account-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/account-service
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/account-service:latest

      - name: Build and push ai-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/ai-service
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/ai-service:latest

      - name: Build and push auth-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/auth-service
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/auth-service:latest

      - name: Build and push gateway
        uses: docker/build-push-action@v6
        with:
          context: ./backend/gateway
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/gateway:latest

      - name: Build and push notification-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/notification-service
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/notification-service:latest

      - name: Build and push rating-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/rating-service
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/rating-service:latest

      - name: Build and push route-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/route-service
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/route-service:latest

      - name: Build and push subscription-service
        uses: docker/build-push-action@v6
        with:
          context: ./backend/subscription-service
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/subscription-service:latest

  deploy:
    # if: ${{ github.base_ref == 'main' }}
    name: Deploy
    runs-on: ubuntu-latest
    needs: build_and_push_images
    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Copy files via SSH
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          source: "backend/docker-compose.yaml"
          target: ~/

      - name: SSH deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            cd ~/backend
            docker compose down
            docker compose pull
            docker compose --env-file ../.env up -d
            docker system prune -f

